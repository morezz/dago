<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<module name="Checker">
    <property name="charset" value="GB18030"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <module name="FileLength">
        <property name="max" value="2300"/>
    </module>
    <module name="FileTabCharacter"/>

    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!-- 
        <module name="JavadocMethod"/>
        <module name="JavadocType"/>
        <module name="JavadocVariable"/>
        <module name="JavadocStyle"/>
        -->

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName">
            <!-- getter / setter methods allow underline '_' characters -->
            <property name="format" value="^[a-z][a-zA-Z0-9]*$|^(get|set|test)[A-Z]"/>
        </module>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName">
            <!-- Test class allow underline '_' characters -->
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$|^(Test)[A-Z]"/>
        </module>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport">
            <property name="excludes" value="java.io,java.util,java.net,org.junit.Assert,org.junit.Assume"/>
        </module>

        <!-- IllegalImport: defaults to sun.* packages -->
        <module name="IllegalImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
            <property name="max" value="150"/>
        </module>
        <module name="MethodLength">
            <property name="max" value="350"/>
        </module>
        <module name="ParameterNumber"/>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForInitializerPad"/>
        <module name="MethodParamPad">
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="ARRAY_INIT, INC, DEC, UNARY_MINUS, UNARY_PLUS, BNOT, LNOT, DOT"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="allowLineBreaks" value="true"/>
            <property name="tokens" value="DOT, POST_DEC, POST_INC"/>
        </module>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <!-- Remove 'RCURLY' for CheckStyle's report for annoations: @Anno({"val1", "val2"}) with message:
                 ~~~~~~  '}' is not proceded with whitespace. ~~~~~~
            -->
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, 
                                           COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, 
                                           LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, 
                                           LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, 
                                           LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, 
                                           LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, 
                                           QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock">
            <property name="option" value="text"/>
        </module>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!-- <module name="AvoidInlineConditionals"/> -->
        <module name="CovariantEquals"/>
        <!-- <module name="DoubleCheckedLocking"/> -->    <!-- MY FAVOURITE -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <!-- <module name="HiddenField"/> -->
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <!-- 
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="-2, -1, 0, 1, 2"/>
        </module>
        -->

        <!--
        <module name="MissingSwitchDefault"/>
        -->
        <!-- 
        <module name="RedundantThrows">
            <property name="allowUnchecked" value="true"/> 
            <property name="allowSubclasses" value="true"/> 
        </module>
        -->
        <!--
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        -->

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- <module name="FinalClass"/> -->
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
            <property name="packageAllowed" value="true"/>
        </module>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <!-- <module name="FinalParameters"/> -->
        <!-- <module name="TodoComment"/> -->
        <module name="UpperEll"/>
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="0"/>
            <property name="lineWrappingIndentation" value="8"/>
        </module>

        <module name="FileContentsHolder"/>
        <module name="SuppressWarningsHolder"/>

        <module name="IllegalType">
        </module>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="\s$"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="System\.out\.println"/>
        <property name="message" value="Line has System.out.println call."/>
    </module>

    <module name="SuppressWarningsFilter" />
    <!--
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="CHECKSTYLE\:OFF"/>
        <property name="onCommentFormat"  value="CHECKSTYLE\:ON"/>
    </module>
    -->

    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="CSOFF\: *([\w\|]+)"/>
        <property name="onCommentFormat" value="CSON\: *([\w\|]+)"/>
        <property name="checkFormat" value="$1"/>
    </module>
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="CS:AllowPrintln"/>
        <property name="onCommentFormat" value="CS:RejectPrintln"/>
        <property name="checkFormat" value="RegexpSingleline"/>
        <property name="messageFormat" value="^Line has System\.out\.println"/>
    </module>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

</module>
